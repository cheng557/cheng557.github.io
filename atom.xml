<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Moonglow</title>
  
  
  <link href="https://cheng557.github.io/atom.xml" rel="self"/>
  
  <link href="https://cheng557.github.io/"/>
  <updated>2022-09-28T15:18:14.018Z</updated>
  <id>https://cheng557.github.io/</id>
  
  <author>
    <name>moonglow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis缓存相关问题</title>
    <link href="https://cheng557.github.io/2022/09/28/redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <id>https://cheng557.github.io/2022/09/28/redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</id>
    <published>2022-09-28T14:23:03.000Z</published>
    <updated>2022-09-28T15:18:14.018Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缓存问题有哪些"><a href="#缓存问题有哪些" class="headerlink" title="缓存问题有哪些"></a>缓存问题有哪些</h3><p>redis作为一个基于内存的数据库，最常用的场景就是用来作为缓存，替数据库分担压力，当我们引入时，也必须考虑其带来的一些问题。</p><ul><li>缓存雪崩、击穿、穿透</li><li>缓存污染</li><li>缓存和数据库的一致性</li></ul><span id="more"></span><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><ul><li><p>问题来源</p><p>当缓存中的数据在<font color="#0000dd">同一时间大量过期</font>，或者由于redis出现故障而导致的大量请求无法处理，从而都到达数据库，使得数据库的压力骤增，严重时可能引起数据库宕机，导致系统崩溃。</p></li><li><p>解决方案</p></li></ul><ol><li><p>缓存数据的过期时间应该避免设置同一时间，可以通过给过期时间加随机数的方式进行处理</p></li><li><p>构建缓存时加互斥锁，也就是当请求发现缓存中没有数据时，只需要一个线程去从数据库读取数据，然后写入redis，其他线程等待缓存构建完成。</p></li><li><p>热点数据设置永不过期（此时需要考虑会不会被内存淘汰策略所淘汰）</p></li><li><p>针对redis故障引起的缓存雪崩，应该考虑建立基于主从的redis集群，避免单点故障，业务中可以加入请求限流或熔断机制，限制对数据库的并发请求数。</p></li></ol><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><ul><li>问题来源</li></ul><p>当<font color="#0000dd">某些热点数据过期</font>时，若此时正好有大量请求要访问该数据，就会导致请求都落在数据库，引发数据库宕机风险，从造成的结果来看，缓存击穿和缓存雪崩所引发的问题基本一致，都是由于大量请求越过了redis，直接落到了数据库，区别在于一个是由于某些热点数据过期引起，一个是由于大量数据过期引起。</p><ul><li>解决方案</li></ul><p>解决方法基本与之前的相似，构建缓存时加互斥锁、或者设置热点数据永不过期。</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><ul><li>问题来源</li></ul><p>当请求的数据，<font color="#0000dd">不存在于缓存和数据库中时</font>，会导致每次请求都会查询数据库，而每次查询结果都为空，也没法构建缓存，相当于跳过了redis，直接请求到了数据库，若有大量这样的请求同时到来，就会引发数据库宕机风险。</p><ul><li>解决方案</li></ul><ol><li><p>接口层增加参数校验，如用户鉴权、参数合法性校验等，避免非法请求</p></li><li><p>缓存空值，对于数据库中取不到的数据设置一个默认值，然后存入缓存，过期时间可以设置一个较短时间</p></li><li><p>构建布隆过滤器，根据 bloomfilter 的特性，可以快速判断某个数据是否存在，但 bloomfilter 也存在部分误判性，若判断某个数据存在，其并不一定真的存在，若不存在就是真的不存在。</p></li></ol><h3 id="缓存污染"><a href="#缓存污染" class="headerlink" title="缓存污染"></a>缓存污染</h3><p>缓存污染指的是存在<font color="#0000dd">一些数据可能只会被访问一次或者几次，后续就不会在被访问到</font>的情况，比如有个请求读取了大量数据，而这些数据只会被读取这么一次，后续就不再访问了，导致这些数据一直存在于缓存中，占用缓存空间。</p><p>缓存空间毕竟是有限的，如果缓存空间满了，那么每次写入数据时都要根据淘汰策略去淘汰数据，这样就会引入额外的操作时间开销，影响系统的性能。</p><p>Redis3.0 之前，默认的内存淘汰策略是 volatile-lru，会淘汰设置了过期时间的键值中，最近最久未使用的键值对，也就是根据数据的访问时间去淘汰数据，此时就无法解决缓存污染问题，比如应用在一次查询操作中读取了大量数据，而这些数据只会被读取一次，如果这些数据占满了缓存空间，之后有数据要写入缓存的话，就会发生内存淘汰，不仅会影响性能，而且可能会把某些热点数据淘汰出去。</p><p>因此，redis4.0中，引入了LFU策略，可以根据数据被访问的次数去淘汰数据，LFU策略会把那些访问次数低的数据淘汰出去，由此避免了缓存污染问题。</p><h3 id="缓存和数据库的一致性"><a href="#缓存和数据库的一致性" class="headerlink" title="缓存和数据库的一致性"></a>缓存和数据库的一致性</h3><ul><li>问题来源</li></ul><p>使用redis作为缓存，无非两种操作，读取缓存和更新缓存，读取缓存一般没有什么问题，但如果涉及到更新操作，则必须要考虑缓存和数据库之间的数据一致性问题。</p><p>假设我们考虑先更新数据库，后更新缓存，可以想象一下以下场景，请求A先到，首先将数据库中的数据更新为值A，然后在还没来得及更新缓存时，这时又来一个请求B，将数据库中的数据更新为值B，同时更新缓存为值B，然后请求A才开始更新缓存为值A，此时数据库中的值为B，而缓存值为A，发生了缓存和数据库中的数据不一致现象。</p><p>同样的，先更新缓存，后更新数据库也会有数据不一致的问题，主要原因是两个并发的写操作会导致脏数据，因此，就引出了以下几种缓存更新模式。</p><ul><li>缓存更新模式</li></ul><ol><li><p>旁路缓存（Cache Aside Pattern）</p><p>旁路缓存是最常用的缓存更新模式了，其逻辑如下，<font color="#0000dd">当读取数据的时候，如果命中缓存，则直接返回，如果未命中，则从数据库读取出来，然后写入缓存，当更新数据的时候，先更新数据库，然后删除缓存</font>。</p><p>那如果我们先删除缓存，再更新数据库是否也可以呢？可以设想一下，假如有一个更新请求A，先删除缓存，然后在还没来得及更新数据库时，此时又来一个读请求B，查询数据发现未命中，则从数据库读取放入缓存中，之后请求A再更新数据库，于是，缓存中的数据就是更新之前的脏数据。</p><p>先更新数据库，再删除缓存就真的没有问题了吗？可以再设想一下，假如一个读请求访问时，此时缓存中恰好没有数据，然后就去读数据库，在还没来的及将读取的数据写入缓存时，此时来了一个写请求，更新数据库，并删除缓存，然后之前的读请求才开始把之前读到的数据写入缓存，结果还是会造成脏数据。</p><p>虽然理论上还是会存在数据不一致问题，但是实际中出现的概率非常低，因为这个条件首先需要读缓存时缓存未命中，同时有一个并发写操作，并且这个写操作要在读操作读取数据之后进行，同时又要在读操作写入缓存之前，更新数据库，而我们都知道数据库的写入要比缓存的写入要慢，因此满足这些条件的概率非常小。</p><p>当然最好还是为缓存设置上过期时间，这样即使有小概率事件脏数据的发生，也能在一定时间之后，由于数据过期淘汰，重新从数据库读取，从而达到最终一致性的效果，如果业务上真的需要强一致性保证，则需要通过2PC或者Paxos相关协议来保证。</p><p>到这里为止，我们还需要考虑一个问题，缓存删除失败的影响，因此更新数据库和删除缓存并非一个原子操作，存在数据库更新成功，但缓存删除失败的可能性，此时就又出现了数据一致性问题，解决方法其实也很简单，添加重试机制即可，比如引入消息队列，将删除失败的key发送消息队列，然后消费重试删除操作，或者读取binlog日志，拿到其更新数据再操作缓存，这样业务中可以只操作数据库，对缓存的修改可以交给读取binlog日志的程序。</p></li><li><p>读穿&#x2F;写穿策略（Read&#x2F;Write Through）</p><p>在旁路缓存中，我们需要同时操作数据库和缓存，而对Read&#x2F;Write Through策略而言，我们只需要和缓存进行交互，对数据库的更新操作则交给缓存自己去执行。</p><p>Read Through指的是当查询数据时如果数据存在则直接返回，不存在则由缓存自己去数据库查询，然后写入缓存并返回。</p><p>Write Through指的是当更新数据时如果数据存在则直接更新缓存中的数据，然后由缓存自己去同步更新到数据库中，如果数据不存在缓存中则直接更新数据库，然后返回。</p></li><li><p>写回策略（Write behind caching）</p><p>Write Behind 又叫 Write Back，该策略指的是在更新数据的时候，只更新缓存，不更新数据库，对于数据库的更新，会通过异步批量的方式进行。比如Linux文件系统的Page Cache算法，好处是写文件很快，不需要写磁盘就可以返回，但是带来的问题是，数据不是强一致性的，存在数据丢失的风险。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Redis作为我们最常用的缓存组件，想要正确的用好它也并不容易，本文也只是浅尝辄止的总结了一些在缓存层面的使用问题及解决方案，当我们使用某种方式解决某个问题时，也必然也会带来新的问题，比如上面所说的一些缓存更新模式。<font color="#0000dd">软件设计从来都是trade-off，no silver bullet</font>。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://coolshell.cn/articles/17416.html">缓存更新的套路 | 酷 壳 - CoolShell</a>l</p><p><a href="https://www.cnblogs.com/rjzheng/p/9041659.html">https://www.cnblogs.com/rjzheng/p/9041659.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;缓存问题有哪些&quot;&gt;&lt;a href=&quot;#缓存问题有哪些&quot; class=&quot;headerlink&quot; title=&quot;缓存问题有哪些&quot;&gt;&lt;/a&gt;缓存问题有哪些&lt;/h3&gt;&lt;p&gt;redis作为一个基于内存的数据库，最常用的场景就是用来作为缓存，替数据库分担压力，当我们引入时，也必须考虑其带来的一些问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缓存雪崩、击穿、穿透&lt;/li&gt;
&lt;li&gt;缓存污染&lt;/li&gt;
&lt;li&gt;缓存和数据库的一致性&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="redis" scheme="https://cheng557.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://cheng557.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>189-轮转数组</title>
    <link href="https://cheng557.github.io/2022/09/25/189-%E8%BD%AE%E8%BD%AC%E6%95%B0%E7%BB%84/"/>
    <id>https://cheng557.github.io/2022/09/25/189-%E8%BD%AE%E8%BD%AC%E6%95%B0%E7%BB%84/</id>
    <published>2022-09-25T05:40:36.000Z</published>
    <updated>2022-09-25T06:28:41.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="189-轮转数组"><a href="#189-轮转数组" class="headerlink" title="189-轮转数组"></a>189-轮转数组</h2><p>给你一个数组，将数组中的元素向右轮转 <code>k</code> 个位置，其中 <code>k</code> 是非负数</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,2,3,4,5,6,7], k = 3</span><br><span class="line">输出: [5,6,7,1,2,3,4]</span><br><span class="line">解释:</span><br><span class="line">向右轮转 1 步: [7,1,2,3,4,5,6]</span><br><span class="line">向右轮转 2 步: [6,7,1,2,3,4,5]</span><br><span class="line">向右轮转 3 步: [5,6,7,1,2,3,4]</span><br></pre></td></tr></table></figure><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>数组元素可分为两部分，前<code>n-k</code>个元素和后<code>k</code>个元素，然后申请一个新数组，将其分别复制到新数组的前<code>k</code>和后<code>n-k</code>部分，最后在复制回原数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        k = k%n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="comment">// 对原数组的前 n-k 和 后 k 个元素进行交换</span></span><br><span class="line">            temp[(i+k)%n] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            nums[i] = temp[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>对于如下数据，<code>1 2 3 4 5</code>，<code>k = 2</code>，转换后会变成 <code>4 5 1 2 3</code>。</p><p>比对原数组和转换后的数据可以发现，先对数组整体翻转可得 <code>5 4 3 2 1</code> ，再将前 <code>k</code> 个元素翻转可得 <code>4 5 3 2 1</code>，最后再将后<code>n-k</code>个元素翻转可得 <code>4 5 1 2 3</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        k = k%n;</span><br><span class="line">        reverse(nums, <span class="number">0</span>, n-<span class="number">1</span>);</span><br><span class="line">        reverse(nums, <span class="number">0</span>, k-<span class="number">1</span>);</span><br><span class="line">        reverse(nums, k, n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(start &lt; end)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> nums[start];</span><br><span class="line">            nums[start] = nums[end];</span><br><span class="line">            nums[end] = t;</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;189-轮转数组&quot;&gt;&lt;a href=&quot;#189-轮转数组&quot; class=&quot;headerlink&quot; title=&quot;189-轮转数组&quot;&gt;&lt;/a&gt;189-轮转数组&lt;/h2&gt;&lt;p&gt;给你一个数组，将数组中的元素向右轮转 &lt;code&gt;k&lt;/code&gt; 个位置，其中 &lt;code&gt;k&lt;/code&gt; 是非负数&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://cheng557.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://cheng557.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>
